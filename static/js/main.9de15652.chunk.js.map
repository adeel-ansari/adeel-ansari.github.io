{"version":3,"sources":["components/Navigation/NavigationBar.js","components/TestGraph/ForceGraph3.js","components/Tabview/StrategyGridView.js","components/Tabview/Tabview.js","components/Layout/Layout.js","components/Ontology/OntologyHome.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["NavigationBar","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","Nav","className","Item","as","Link","to","clamp","x","lo","hi","ForceGraph3","width","height","graph","ref","useRef","useEffect","draw","svg","d3","current","attr","style","node","append","selectAll","data","nodes","join","classed","text","d","link","links","simulation","force","on","source","y","target","exit","remove","drag","this","event","fx","fy","alpha","restart","call","StrategyGridView","class_dict","Object","keys","map","key","index","Table","striped","bordered","hover","responsive","class_attr","Tabview","Container","Tabs","defaultActiveKey","Tab","eventKey","title","Layout","props","fluid","children","OntologyHome","Row","Card","Body","Title","Text","Button","variant","Home","Jumbotron","App","useState","Fragment","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAwCeA,EAlCO,WAElB,OACI,eAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,UAEI,cAACF,EAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7B,cAACJ,EAAA,EAAOK,SAAR,CAAiBC,GAAG,mBAApB,SACI,eAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,UACI,cAACD,EAAA,EAAIE,KAAL,CAAUC,GAAG,KAAb,SACI,cAACH,EAAA,EAAII,KAAL,CAAUD,GAAIC,IAAMC,GAAG,IAAvB,oBAEJ,cAACL,EAAA,EAAIE,KAAL,CAAUC,GAAG,KAAb,SACI,cAACH,EAAA,EAAII,KAAL,CAAUD,GAAIC,IAAMC,GAAG,cAAvB,mC,gBCbxB,SAASC,EAAMC,EAAGC,EAAIC,GAClB,OAAOF,EAAIC,EAAKA,EAAKD,EAAIE,EAAKA,EAAKF,EAkHxBG,MA/Gf,YAAgD,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MAC5BC,EAAMC,mBAEZC,qBAAU,WACNC,MACD,CAACJ,IAGJ,IAAMI,EAAO,WAKT,IAAMC,EAAMC,IAAUL,EAAIM,SACrBC,KAAK,QAASV,GACdU,KAAK,SAAUT,GACfU,MAAM,SAAU,mBAEfC,EAAOL,EAAIM,OAAO,KACnBC,UAAU,KACVC,KAAKb,EAAMc,OACXC,KAAK,KACLC,QAAQ,QAAQ,GAGrBN,EAAKC,OAAO,UACPH,KAAK,QAAS,QACdA,KAAK,IAAK,IAEfE,EAAKC,OAAO,QACPH,KAAK,IAAK,GACVA,KAAK,IAAK,UACVS,MAAK,SAAAC,GAAC,OAAIA,EAAEhC,MAEjB,IAAMiC,EAAOd,EAAIM,OAAO,KACnBH,KAAK,SAAU,QACfA,KAAK,iBAAkB,IACvBI,UAAU,QACVC,KAAKb,EAAMoB,OACXL,KAAK,QAELP,KAAK,eAAgB,GAEpBa,EAAaf,MAEdQ,MAAMd,EAAMc,OACZQ,MAAM,SAAUhB,OAChBgB,MAAM,SAAUhB,IAAeR,EAAQ,EAAGC,EAAS,IACnDuB,MAAM,OAAQhB,MAAec,MAAMpB,EAAMoB,OAAOlC,IAAG,SAAAgC,GAAC,OAAEA,EAAEhC,OACxDqC,GAAG,QA0BR,WArBIJ,EACKX,KAAK,MAAM,SAAAU,GAAC,OAAIA,EAAEM,OAAO9B,KACzBc,KAAK,MAAM,SAAAU,GAAC,OAAIA,EAAEM,OAAOC,KACzBjB,KAAK,MAAM,SAAAU,GAAC,OAAIA,EAAEQ,OAAOhC,KACzBc,KAAK,MAAM,SAAAU,GAAC,OAAIA,EAAEQ,OAAOD,KACzBE,OAAOC,SAKZlB,EACKF,KAAK,aAAa,SAAAU,GAAC,0BAAiBA,EAAExB,EAAnB,YAAwBwB,EAAEO,EAA1B,WAG5B,IAAMI,EAAOvB,MAERiB,GAAG,SAiBR,WACIjB,IAAUwB,MAAMd,QAAQ,SAAS,MAjBhCO,GAAG,QAoBR,SAAiBQ,EAAOb,GACpBA,EAAEc,GAAKvC,EAAMsC,EAAMrC,EAAG,EAAGI,GACzBoB,EAAEe,GAAKxC,EAAMsC,EAAMN,EAAG,EAAG1B,GACzBsB,EAAWa,MAAM,GAAGC,aArBxBzB,EAAK0B,KAAKP,GAAMN,GAAG,SAOnB,SAAeQ,EAAOb,UACXA,EAAEc,UACFd,EAAEe,GACT3B,IAAUwB,MAAMd,QAAQ,SAAS,GACjCK,EAAWa,MAAM,GAAGC,cAgB5B,OACI,qBAAK/C,UAAU,QAAf,SACI,qBAAKa,IAAKA,O,SCiEPoC,G,MA5KU,WAErB,IAAMC,EAAa,CACf,SAAY,CACR,CACI,SAAY,0BACZ,gBAAiB,iBACjB,eAAgB,kBAEpB,CACI,SAAY,iBACZ,gBAAiB,mBACjB,eAAgB,UAEpB,CACI,SAAY,4BACZ,gBAAiB,iBACjB,eAAgB,oBAEpB,CACI,SAAY,uBACZ,gBAAiB,iBACjB,eAAgB,eAEpB,CACI,SAAY,qBACZ,gBAAiB,mBACjB,eAAgB,YAEpB,CACI,SAAY,oBACZ,gBAAiB,iBACjB,eAAgB,YAEpB,CACI,SAAY,mBACZ,gBAAiB,mBACjB,eAAgB,YAEpB,CACI,SAAY,6BACZ,gBAAiB,iBACjB,eAAgB,sBAGxB,YAAe,CACX,CACI,SAAY,kCACZ,gBAAiB,iBACjB,eAAgB,uBAEpB,CACI,SAAY,0BACZ,gBAAiB,iBACjB,eAAgB,eAEpB,CACI,SAAY,wBACZ,gBAAiB,iBACjB,eAAgB,aAEpB,CACI,SAAY,wCACZ,gBAAiB,iBACjB,eAAgB,6BAEpB,CACI,SAAY,8BACZ,gBAAiB,iBACjB,eAAgB,oBAGxB,SAAY,CACR,CACI,SAAY,2BACZ,gBAAiB,iBACjB,eAAgB,oBAGxB,eAAkB,CACd,CACI,SAAY,gCACZ,gBAAiB,iBACjB,eAAgB,kBAEpB,CACI,SAAY,yCACZ,gBAAiB,iBACjB,eAAgB,kBAEpB,CACI,SAAY,oCACZ,gBAAiB,iBACjB,eAAgB,aAGxB,aAAgB,CACZ,CACI,SAAY,wBACZ,gBAAiB,iBACjB,eAAgB,YAEpB,CACI,SAAY,8BACZ,gBAAiB,iBACjB,eAAgB,mBAGxB,eAAkB,CACd,CACI,SAAY,gCACZ,gBAAiB,iBACjB,eAAgB,mBAGxB,SAAY,CACR,CACI,SAAY,2BACZ,gBAAiB,iBACjB,eAAgB,oBAGxB,kBAAqB,CACjB,CACI,SAAY,wCACZ,gBAAiB,mBACjB,eAAgB,UAEpB,CACI,SAAY,sCACZ,gBAAiB,iBACjB,eAAgB,cAEpB,CACI,SAAY,oCACZ,gBAAiB,iBACjB,eAAgB,qBAK5B,OACIC,OAAOC,KAAKF,GAAYG,KAAI,SAACC,EAAKC,GAC9B,OACI,qCACI,6BACKD,IAEL,eAACE,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,EAAxC,UACI,gCACI,6BACI,oDAGR,gCAEQV,EAAWI,GAAKD,KAAI,SAACQ,GACjB,OACI,6BACKA,EAAU,mBAMnC,+B,2BC1IdjD,EACF,CACI,MAAS,CACL,CAAE,OAAU,cAAe,OAAU,uBACrC,CAAE,OAAU,cAAe,OAAU,6BACrC,CAAE,OAAU,cAAe,OAAU,eACrC,CAAE,OAAU,cAAe,OAAU,mBACrC,CAAE,OAAU,cAAe,OAAU,aACrC,CAAE,OAAU,WAAY,OAAU,mBAClC,CAAE,OAAU,WAAY,OAAU,oBAClC,CAAE,OAAU,WAAY,OAAU,UAClC,CAAE,OAAU,WAAY,OAAU,qBAClC,CAAE,OAAU,WAAY,OAAU,YAClC,CAAE,OAAU,WAAY,OAAU,kBAClC,CAAE,OAAU,WAAY,OAAU,YAClC,CAAE,OAAU,WAAY,OAAU,eAClC,CAAE,OAAU,eAAgB,OAAU,YACtC,CAAE,OAAU,oBAAqB,OAAU,UAC3C,CAAE,OAAU,oBAAqB,OAAU,mBAC3C,CAAE,OAAU,oBAAqB,OAAU,cAC3C,CAAE,OAAU,eAAgB,OAAU,kBACtC,CAAE,OAAU,iBAAkB,OAAU,kBACxC,CAAE,OAAU,WAAY,OAAU,mBAClC,CAAE,OAAU,iBAAkB,OAAU,kBACxC,CAAE,OAAU,iBAAkB,OAAU,YACxC,CAAE,OAAU,iBAAkB,OAAU,mBAE5C,MAAS,CACL,CAAE,GAAM,uBACR,CAAE,GAAM,6BACR,CAAE,GAAM,eACR,CAAE,GAAM,mBACR,CAAE,GAAM,aACR,CAAE,GAAM,YACR,CAAE,GAAM,mBACR,CAAE,GAAM,oBACR,CAAE,GAAM,UACR,CAAE,GAAM,qBACR,CAAE,GAAM,YACR,CAAE,GAAM,kBACR,CAAE,GAAM,YACR,CAAE,GAAM,YACR,CAAE,GAAM,eACR,CAAE,GAAM,gBACR,CAAE,GAAM,YACR,CAAE,GAAM,mBACR,CAAE,GAAM,cACR,CAAE,GAAM,kBACR,CAAE,GAAM,YACR,CAAE,GAAM,mBACR,CAAE,GAAM,kBACR,CAAE,GAAM,cA0BLkD,EAtBC,WAEZ,OACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAMC,iBAAiB,WAAWnE,GAAG,2BAArC,UACI,eAACoE,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,YAA/B,UACI,uBACA,cAAC,EAAD,OAEJ,eAACF,EAAA,EAAD,CAAKC,SAAS,YAAYC,MAAM,aAAhC,UACI,uBACA,cAAC,EAAD,CAAa1D,MAAO,KAAMC,OAAQ,KAAMC,MAAOA,OAEnD,eAACsD,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,UAA9B,UACI,uBADJ,8D,0BC/FHC,G,OAAS,SAACC,GAAD,OAClB,cAACP,EAAA,EAAD,CAAWQ,OAAK,EAACvE,UAAU,YAA3B,SACKsE,EAAME,aCkCAC,G,OAlCM,WAEjB,OACI,cAACC,EAAA,EAAD,CAAK1E,UAAU,yBAAf,SACI,cAAC2E,EAAA,EAAD,CAAMtD,MAAO,CAAEX,MAAO,SAAtB,SACI,eAACiE,EAAA,EAAKC,KAAN,WACI,cAACD,EAAA,EAAKE,MAAN,uBACA,cAACF,EAAA,EAAKG,KAAN,6MAKA,cAACC,EAAA,EAAD,CACI7E,GAAIC,IACJC,GAAG,kBACH4E,QAAQ,UAHZ,4B,SCqCLC,EAjDF,WAET,OACI,gCACI,eAACC,EAAA,EAAD,WACI,8CACA,iIAGA,4BACI,cAACH,EAAA,EAAD,CAAQ7E,GAAIC,IAAMC,GAAG,cAAc4E,QAAQ,UAA3C,qCAGR,2B,OCmBGG,MA1Bf,WAAgB,IAAD,EAEEC,mBAAS,IAExB,OAJa,oBAKX,eAAC,IAAD,WACE,iCACE,cAAC,EAAD,MAEF,uBAEA,cAAC,IAAMC,SAAP,UACE,cAAC,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,cAAC,IAAD,CAAOM,KAAK,cAAcC,UAAWf,IACrC,cAAC,IAAD,CAAOc,KAAK,kBAAkBC,UAAW1B,WAI/C,2BCpBS2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9de15652.chunk.js","sourcesContent":["import React from 'react';\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\n\nconst NavigationBar = () => {\n\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            {/* <Navbar.Brand href=\"#home\">adeelansari.io</Navbar.Brand> */}\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Item as=\"li\">\n                        <Nav.Link as={Link} to='/'>Home</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item as=\"li\">\n                        <Nav.Link as={Link} to='/ontologies'>Ontologies</Nav.Link>\n                    </Nav.Item>\n                    {/* <Nav.Link href=\"#about\">About</Nav.Link> */}\n                    {/* <Nav.Link href=\"#ontologies\">Ontologies</Nav.Link> */}\n                    {/* <Nav.Link href=\"#demo\">Demo</Nav.Link> */}\n                    {/* <NavDropdown title=\"Ontologies\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#ontology/strategicchoicecascade\">Strategic Choice Cascade</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#ontology/businessmodel\">Business Model</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#ontology/anotherontology\">Another Ontology</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"#ontology/anotherlink\">Separated link</NavDropdown.Item>\n                    </NavDropdown> */}\n                </Nav>\n                {/* <Form inline>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                    <Button variant=\"primary\">Search</Button>\n                </Form> */}\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n\nexport default NavigationBar;\n","// ForceGraph.js\nimport * as d3 from 'd3';\nimport React, { useRef, useEffect } from 'react';\n//import './ForceGraph.css'\n\nfunction clamp(x, lo, hi) {\n    return x < lo ? lo : x > hi ? hi : x;\n};\n\nfunction ForceGraph3({ width, height, graph }) {\n    const ref = useRef();\n\n    useEffect(() => {\n        draw();\n    }, [graph]);\n\n    \n    const draw = () => {\n\n        // define objects\n        // not defined in the functions because otherwise it will\n        // append a new link/node each time it moves\n        const svg = d3.select(ref.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .style(\"border\", \"1px solid black\");\n\n        const node = svg.append(\"g\")\n            .selectAll(\"g\")\n            .data(graph.nodes)\n            .join(\"g\")\n            .classed(\"node\", true);\n\n        // Add one circle in each group\n        node.append(\"circle\")\n            .attr(\"class\", \"node\")\n            .attr(\"r\", 14);\n\n        node.append(\"text\")\n            .attr(\"x\", 6)\n            .attr(\"y\", \"0.31em\")\n            .text(d => d.id)\n\n        const link = svg.append(\"g\")\n            .attr(\"stroke\", \"#999\")\n            .attr(\"stroke-opacity\", 0.6)\n            .selectAll(\"line\")\n            .data(graph.links)\n            .join(\"line\")\n            //.attr(\"stroke-width\", d => Math.sqrt(d.value)\n            .attr(\"stroke-width\", 1);\n\n        const simulation = d3\n            .forceSimulation()\n            .nodes(graph.nodes)\n            .force(\"charge\", d3.forceManyBody())\n            .force(\"center\", d3.forceCenter(width / 2, height / 2))\n            .force(\"link\", d3.forceLink().links(graph.links).id(d=>d.id))\n            .on(\"tick\", tick);\n\n            \n        function updateLinks() {\n\n            link\n                .attr(\"x1\", d => d.source.x)\n                .attr(\"y1\", d => d.source.y)\n                .attr(\"x2\", d => d.target.x)\n                .attr(\"y2\", d => d.target.y)\n                .exit().remove()\n        }\n\n        function updateNodes() {\n\n            node\n                .attr(\"transform\", d => `translate(${d.x},${d.y})`);\n        }\n\n        const drag = d3\n            .drag()\n            .on(\"start\", dragstart)\n            .on(\"drag\", dragged);\n\n        node.call(drag).on(\"click\", click);\n\n        function tick() {\n            updateLinks()\n            updateNodes()\n        }\n\n        function click(event, d) {\n            delete d.fx;\n            delete d.fy;\n            d3.select(this).classed(\"fixed\", false);\n            simulation.alpha(1).restart();\n        }\n\n        function dragstart() {\n            d3.select(this).classed(\"fixed\", true);\n        }\n\n        function dragged(event, d) {\n            d.fx = clamp(event.x, 0, width);\n            d.fy = clamp(event.y, 0, height);\n            simulation.alpha(1).restart();\n        }\n\n\n    };\n\n    return (\n        <div className=\"graph\">\n            <svg ref={ref}>\n                {/* <g className=\"tooltip-area\">\n                    <text className=\"tooltip-area__text\"></text>\n                </g> */}\n            </svg>\n        </div>\n    );\n};\n\nexport default ForceGraph3;","import React from 'react';\nimport { Card, Container, Row, Col, Table } from 'react-bootstrap';\nimport './StrategyGridView.css' ;\n\nconst StrategyGridView = () => {\n\n    const class_dict = {\n        \"strategy\": [\n            {\n                \"Property\": \"Strategy.coreCapability\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"CoreCapability\"\n            },\n            {\n                \"Property\": \"Strategy.title\",\n                \"Property Type\": \"DatatypeProperty\",\n                \"Target Class\": \"string\"\n            },\n            {\n                \"Property\": \"Strategy.managementSystem\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"ManagementSystem\"\n            },\n            {\n                \"Property\": \"Strategy.whereToPlay\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"WhereToPlay\"\n            },\n            {\n                \"Property\": \"Strategy.startDate\",\n                \"Property Type\": \"DatatypeProperty\",\n                \"Target Class\": \"dateTime\"\n            },\n            {\n                \"Property\": \"Strategy.howToWin\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"HowToWin\"\n            },\n            {\n                \"Property\": \"Strategy.endDate\",\n                \"Property Type\": \"DatatypeProperty\",\n                \"Target Class\": \"dateTime\"\n            },\n            {\n                \"Property\": \"Strategy.winningAspiration\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"WinningAspiration\"\n            }\n        ],\n        \"WhereToPlay\": [\n            {\n                \"Property\": \"WhereToPlay.distributionChannel\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"DistributionChannel\"\n            },\n            {\n                \"Property\": \"WhereToPlay.productType\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"ProductType\"\n            },\n            {\n                \"Property\": \"WhereToPlay.geography\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"Geography\"\n            },\n            {\n                \"Property\": \"WhereToPlay.verticalStageOfProduction\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"VerticalStageOfProduction\"\n            },\n            {\n                \"Property\": \"WhereToPlay.consumerSegment\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"ConsumerSegment\"\n            }\n        ],\n        \"Consumer\": [\n            {\n                \"Property\": \"Consumer.consumerSegment\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"ConsumerSegment\"\n            }\n        ],\n        \"CoreCapability\": [\n            {\n                \"Property\": \"CoreCapability.reinforcingRod\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"CoreCapability\"\n            },\n            {\n                \"Property\": \"CoreCapability.reinforcingRelationship\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"CoreCapability\"\n            },\n            {\n                \"Property\": \"CoreCapability.supportingActivity\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"Activity\"\n            }\n        ],\n        \"Organization\": [\n            {\n                \"Property\": \"Organization.strategy\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"strategy\"\n            },\n            {\n                \"Property\": \"Organization.activitySystem\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"ActivitySystem\"\n            }\n        ],\n        \"ActivitySystem\": [\n            {\n                \"Property\": \"ActivitySystem.coreCapability\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"CoreCapability\"\n            }\n        ],\n        \"Customer\": [\n            {\n                \"Property\": \"Customer.customerSegment\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"CustomerSegment\"\n            }\n        ],\n        \"WinningAspiration\": [\n            {\n                \"Property\": \"WinningAspiration.AspirationStatement\",\n                \"Property Type\": \"DatatypeProperty\",\n                \"Target Class\": \"string\"\n            },\n            {\n                \"Property\": \"WinningAspiration.competitorContext\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"Competitor\"\n            },\n            {\n                \"Property\": \"WinningAspiration.consumerContext\",\n                \"Property Type\": \"ObjectProperty\",\n                \"Target Class\": \"ConsumerSegment\"\n            }\n        ]\n    }\n    \n    return (\n        Object.keys(class_dict).map((key, index) => {\n            return (\n                <>\n                    <h3>\n                        {key}\n                    </h3>\n                    <Table striped bordered hover responsive>\n                        <thead>\n                            <tr>\n                                <th>Attribute Name</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                class_dict[key].map((class_attr) => {\n                                    return (\n                                        <tr>\n                                            {class_attr['Property']}\n                                        </tr>)\n                                })\n                            }\n                        </tbody>\n                    </Table>\n                    <br />\n                </>\n            )\n        })\n    );\n};\n\nexport default StrategyGridView;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ForceGraph3 from '../TestGraph/ForceGraph3';\nimport StrategyGridView from './StrategyGridView';\nimport { Tabs, Tab, Container } from 'react-bootstrap';\n\n// const graph = ({\n//     nodes: [\n//         {\n//             index: 0,\n//             id: \"a\",\n//             name: \"Adeel\"\n//         },\n//         {\n//             index: 1,\n//             id: \"b\",\n//             name: \"Khadijah\"\n//         },\n//         {\n//             index: 2,\n//             id: \"c\",\n//             name: \"Afeefa\"\n//         }\n//     ],\n//     links: [\n//         { source: \"Adeel\", target: \"Khadijah\" },\n//         { source: \"Khadijah\", target: \"Afeefa\" },\n//         { source: \"Adeel\", target: \"Afeefa\" }\n//     ]\n// });\n\nconst graph = (\n    {\n        'links': [\n            { 'source': 'WhereToPlay', 'target': 'DistributionChannel' },\n            { 'source': 'WhereToPlay', 'target': 'VerticalStageOfProduction' },\n            { 'source': 'WhereToPlay', 'target': 'ProductType' },\n            { 'source': 'WhereToPlay', 'target': 'ConsumerSegment' },\n            { 'source': 'WhereToPlay', 'target': 'Geography' },\n            { 'source': 'Consumer', 'target': 'ConsumerSegment' },\n            { 'source': 'strategy', 'target': 'ManagementSystem' },\n            { 'source': 'strategy', 'target': 'string' },\n            { 'source': 'strategy', 'target': 'WinningAspiration' },\n            { 'source': 'strategy', 'target': 'HowToWin' },\n            { 'source': 'strategy', 'target': 'CoreCapability' },\n            { 'source': 'strategy', 'target': 'dateTime' },\n            { 'source': 'strategy', 'target': 'WhereToPlay' },\n            { 'source': 'Organization', 'target': 'strategy' },\n            { 'source': 'WinningAspiration', 'target': 'string' },\n            { 'source': 'WinningAspiration', 'target': 'ConsumerSegment' },\n            { 'source': 'WinningAspiration', 'target': 'Competitor' },\n            { 'source': 'Organization', 'target': 'ActivitySystem' },\n            { 'source': 'ActivitySystem', 'target': 'CoreCapability' },\n            { 'source': 'Customer', 'target': 'CustomerSegment' },\n            { 'source': 'CoreCapability', 'target': 'CoreCapability' },\n            { 'source': 'CoreCapability', 'target': 'Activity' },\n            { 'source': 'CoreCapability', 'target': 'CoreCapability' }\n        ],\n        'nodes': [\n            { 'id': 'DistributionChannel' },\n            { 'id': 'VerticalStageOfProduction' },\n            { 'id': 'ProductType' },\n            { 'id': 'ConsumerSegment' },\n            { 'id': 'Geography' },\n            { 'id': 'Consumer' },\n            { 'id': 'ConsumerSegment' },\n            { 'id': 'ManagementSystem' },\n            { 'id': 'string' },\n            { 'id': 'WinningAspiration' },\n            { 'id': 'HowToWin' },\n            { 'id': 'CoreCapability' },\n            { 'id': 'dateTime' },\n            { 'id': 'strategy' },\n            { 'id': 'WhereToPlay' },\n            { 'id': 'Organization' },\n            { 'id': 'strategy' },\n            { 'id': 'ConsumerSegment' },\n            { 'id': 'Competitor' },\n            { 'id': 'ActivitySystem' },\n            { 'id': 'Customer' },\n            { 'id': 'CustomerSegment' },\n            { 'id': 'CoreCapability' },\n            { 'id': 'Activity' }]\n    }\n)\n\nconst Tabview = () => {\n\n    return (\n        <Container>\n            <Tabs defaultActiveKey=\"gridview\" id=\"uncontrolled-tab-example\">\n                <Tab eventKey=\"gridview\" title=\"Grid View\">\n                    <br />\n                    <StrategyGridView />\n                </Tab>\n                <Tab eventKey=\"graphview\" title=\"Graph View\">\n                    <br />\n                    <ForceGraph3 width={1400} height={1200} graph={graph} />\n                </Tab>\n                <Tab eventKey=\"example\" title=\"Example\">\n                    <br />\n                    This tab will contain an example for the ontology.\n            </Tab>\n            </Tabs>\n        </Container>\n    );\n};\n\nexport default Tabview;","import { Container } from 'react-bootstrap';\nimport React from 'react';\nimport './Layout.css';\n\nexport const Layout = (props) => (\n    <Container fluid className=\"Container\">\n        {props.children}\n    </Container>\n)\nexport default Layout;\n","import React from 'react';\nimport { Card, Button, Row } from 'react-bootstrap';\nimport Layout from '../Layout/Layout';\nimport Iframe from 'react-iframe'\nimport { Link } from 'react-router-dom';\n\nconst OntologyHome = () => {\n\n    return (\n        <Row className=\"justify-content-center\">\n            <Card style={{ width: '18rem' }}>\n                <Card.Body>\n                    <Card.Title>Strategy</Card.Title>\n                    <Card.Text>\n                        This ontology is based on the book, 'Playing to Win' by A.G. Lafley and Roger L. Martin.\n                        It provides some of the foundational components that can be used to link an organizations\n                        activities.\n                    </Card.Text>\n                    <Button\n                        as={Link}\n                        to=\"/ontologyDetail\"\n                        variant=\"primary\"\n                    >\n                        Enter\n                    </Button>\n                </Card.Body>\n                {/* <Card.Footer className=\"text-muted\">\n                    <Iframe url=\"https://read.amazon.ca/kp/card?asin=B00AJVJ1HI&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_aW5.FbG44G6SR\"\n                        width=\"336px\"\n                        height=\"550px\"\n                        id=\"myId\"\n                        className=\"myClassname\"\n                        display=\"initial\"\n                        position=\"relative\" />\n                </Card.Footer> */}\n            </Card>\n        </Row>\n    );\n};\n\nexport default OntologyHome;","import React from 'react';\nimport { Jumbotron, Container, Row, Col } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\n\nconst Home = () => {\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Adeel Ansari</h1>\n                <p>\n                    Welcome to my page where I explore using knowledge graphs to improve organizational performance.\n            </p>\n                <p>\n                    <Button as={Link} to=\"/ontologies\" variant=\"primary\">Explore Ontologies</Button>\n                </p>\n            </Jumbotron>\n            <br >\n            </br>\n            {/* <Container>\n                <Row>\n                    <Col>\n                        <h2>\n                            Opportunity\n                        </h2>\n                        <p>\n                            Model business frameworks using OWL/RDF and demostrate how storing, sharing, and analyzing\n                            this type of data can help solve important business challenges.\n                        </p>\n                    </Col>\n                    <Col>\n                        <h2>\n                            Solution\n                        </h2>\n                        <p>\n                            You can contact me through LinkedIn or email.\n                        </p>\n                    </Col>\n                    <Col>\n                        <h2>\n                            About Me\n                        </h2>\n                        <p>\n                            I hold a Bachelors of Computer Science and an MBA.  My work experience primarily includes\n                            data engineering and product management.  You can contact me through LinkedIn or by email.\n                        </p>\n                    </Col>\n                </Row>\n            </Container> */}\n        </div>\n    );\n};\n\nexport default Home;","// App.js\nimport React, { useEffect, useState, Component } from 'react';\nimport './App.css';\nimport NavigationBar from './components/Navigation/NavigationBar';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Tabview from './components/Tabview/Tabview';\nimport OntologyHome from './components/Ontology/OntologyHome';\nimport Home from './components/Home/Home';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Layout } from './components/Layout/Layout';\n\nfunction App() {\n\n  const [data] = useState([]);\n\n  return (\n    <BrowserRouter>\n      <header>\n        <NavigationBar />\n      </header>\n      <br>\n      </br>\n      <React.Fragment>\n        <Layout>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/ontologies' component={OntologyHome} />\n            <Route path='/ontologyDetail' component={Tabview} />\n          </Switch>\n        </Layout>\n      </React.Fragment>\n      <br />\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}