{"version":3,"sources":["components/Navigation/NavigationBar.js","components/TestGraph/ForceGraph3.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["NavigationBar","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","Nav","className","Link","href","ForceGraph3","Home","Jumbotron","Button","variant","disabled","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA8BeA,EA1BO,WAElB,OACI,eAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,UAEI,cAACF,EAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7B,cAACJ,EAAA,EAAOK,SAAR,CAAiBC,GAAG,mBAApB,SACI,cAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,SACI,cAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,QAAf,0B,yCC4GLC,I,gBCpGAC,EAfF,WAET,OACI,eAACC,EAAA,EAAD,WACI,8CACA,iIAGA,4BACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,UAAQ,EAAlC,sCCwCDC,MAnBf,WAAgB,IAAD,EAEEC,mBAAS,IAExB,OAJa,oBAKX,sBAAKV,UAAU,MAAf,UACE,iCACE,cAAC,EAAD,MAEF,uBACA,cAAC,EAAD,QCjCSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b952321d.chunk.js","sourcesContent":["import React from 'react';\nimport { Nav, Navbar, NavDropdown, Form, FormControl } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\n\nconst NavigationBar = () => {\n\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            {/* <Navbar.Brand href=\"#home\">adeelansari.io</Navbar.Brand> */}\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    {/* <NavDropdown title=\"Ontologies\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#ontology/strategicchoicecascade\">Strategic Choice Cascade</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#ontology/businessmodel\">Business Model</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#ontology/anotherontology\">Another Ontology</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"#ontology/anotherlink\">Separated link</NavDropdown.Item>\n                    </NavDropdown> */}\n                </Nav>\n                {/* <Form inline>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                    <Button variant=\"primary\">Search</Button>\n                </Form> */}\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n\nexport default NavigationBar;","// ForceGraph.js\nimport * as d3 from 'd3';\nimport React, { useRef, useEffect } from 'react';\nimport './ForceGraph.css'\n\nfunction clamp(x, lo, hi) {\n    return x < lo ? lo : x > hi ? hi : x;\n};\n\nfunction ForceGraph3({ width, height, graph }) {\n    const ref = useRef();\n\n    useEffect(() => {\n        draw();\n    }, [graph]);\n\n    \n    const draw = () => {\n\n        // define objects\n        // not defined in the functions because otherwise it will\n        // append a new link/node each time it moves\n        const svg = d3.select(ref.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .style(\"border\", \"1px solid black\");\n\n        const node = svg.append(\"g\")\n            .selectAll(\"g\")\n            .data(graph.nodes)\n            .join(\"g\")\n            .classed(\"node\", true);\n\n        // Add one circle in each group\n        node.append(\"circle\")\n            .attr(\"class\", \"node\")\n            .attr(\"r\", 8);\n\n        node.append(\"text\")\n            .attr(\"x\", 6)\n            .attr(\"y\", \"0.31em\")\n            .text(d => d.name)\n\n        const link = svg.append(\"g\")\n            .attr(\"stroke\", \"#999\")\n            .attr(\"stroke-opacity\", 0.6)\n            .selectAll(\"line\")\n            .data(graph.links)\n            .join(\"line\")\n            //.attr(\"stroke-width\", d => Math.sqrt(d.value)\n            .attr(\"stroke-width\", 1);\n\n        const simulation = d3\n            .forceSimulation()\n            .nodes(graph.nodes)\n            .force(\"charge\", d3.forceManyBody())\n            .force(\"center\", d3.forceCenter(width / 2, height / 2))\n            .force(\"link\", d3.forceLink().links(graph.links).id(d=>d.name))\n            .on(\"tick\", tick);\n\n            \n        function updateLinks() {\n\n            link\n                .attr(\"x1\", d => d.source.x)\n                .attr(\"y1\", d => d.source.y)\n                .attr(\"x2\", d => d.target.x)\n                .attr(\"y2\", d => d.target.y)\n                .exit().remove()\n        }\n\n        function updateNodes() {\n\n            node\n                .attr(\"transform\", d => `translate(${d.x},${d.y})`);\n        }\n\n        const drag = d3\n            .drag()\n            .on(\"start\", dragstart)\n            .on(\"drag\", dragged);\n\n        node.call(drag).on(\"click\", click);\n\n        function tick() {\n            updateLinks()\n            updateNodes()\n        }\n\n        function click(event, d) {\n            delete d.fx;\n            delete d.fy;\n            d3.select(this).classed(\"fixed\", false);\n            simulation.alpha(1).restart();\n        }\n\n        function dragstart() {\n            d3.select(this).classed(\"fixed\", true);\n        }\n\n        function dragged(event, d) {\n            d.fx = clamp(event.x, 0, width);\n            d.fy = clamp(event.y, 0, height);\n            simulation.alpha(1).restart();\n        }\n\n\n    };\n\n    return (\n        <div className=\"graph\">\n            <svg ref={ref}>\n                {/* <g className=\"tooltip-area\">\n                    <text className=\"tooltip-area__text\"></text>\n                </g> */}\n            </svg>\n        </div>\n    );\n};\n\nexport default ForceGraph3;","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\n\n\nconst Home = () => {\n\n    return (\n        <Jumbotron>\n            <h1>adeel-ansari</h1>\n            <p>\n                Welcome to my page where I explore using knowledge graphs to improve organizational performance.\n            </p>\n            <p>\n                <Button variant=\"primary\" disabled>Explore Ontologies</Button>\n            </p>\n        </Jumbotron>\n    );\n};\n\nexport default Home;","// App.js\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport NavigationBar from './components/Navigation/NavigationBar';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Tabview from './components/Tabview/Tabview';\nimport Home from './components/Home/Home';\n\n// const graph = ({\n//   nodes: Array.from({ length: 13 }, () => ({})),\n//   links: [\n//       { source: 0, target: 1 },\n//       { source: 1, target: 2 },\n//       { source: 2, target: 0 },\n//       { source: 1, target: 3 },\n//       { source: 3, target: 2 },\n//       { source: 3, target: 4 },\n//       { source: 4, target: 5 },\n//       { source: 5, target: 6 },\n//       { source: 5, target: 7 },\n//       { source: 6, target: 7 },\n//       { source: 6, target: 8 },\n//       { source: 7, target: 8 },\n//       { source: 9, target: 4 },\n//       { source: 9, target: 11 },\n//       { source: 9, target: 10 },\n//       { source: 10, target: 11 },\n//       { source: 11, target: 12 },\n//       { source: 12, target: 10 }\n//   ]\n// });\n\n\n\nfunction App() {\n\n  const [data] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <NavigationBar />\n      </header>\n      <br />\n      <Home />\n      {/* <h1 align=\"center\">Strategic Choice Cascade</h1> */}\n      {/* <Container>\n        <Tabview />\n      </Container> */}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}